name: Compilation checks
on: [push, pull_request]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true  # Cancel in-flight jobs for the same branch or PR

env:
    BENCHMARKS_CACHE: "build-benchmarks"

jobs:
    formatting-check:
        name: Formatting Check
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Run clang-format style check for C/C++ programs.
              uses: jidicula/clang-format-action@v3.5.1
              with:
                clang-format-version: '11'
                check-path: '.'
                fallback-style: 'Google'

    compile-benchmarks:
        name: Compile on ${{matrix.os}}
        needs: formatting-check
        runs-on: ${{matrix.os}}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-18.04, ubuntu-20.04]
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Cache benchmark binary
              id: cache_bench
              if: ${{ matrix.os == 'ubuntu-20.04' }}
              uses: actions/cache@v2
              with:
                path: |
                    ./benchmarks/bin
                    ./benchmarks/tasks
                key: ${{ matrix.os }}-${{ env.BENCHMARKS_CACHE }}

            # Install with brew to have wasm-ld
            - name: Install Brew
              run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            - name: Verify Brew
              run: brew help
            - name: Install LLVM/clang
              run: brew install llvm
            - name: Verify clang
              run: clang --version
            - name: Compile benchmarks
              run: make -C benchmarks/ clean all

    run-benchmarks:
        runs-on: ubuntu-20.04
        needs: compile-benchmarks
        name: Check benchmarks
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Get benchmark binary
              id: cache_bench
              uses: actions/cache@v2
              with:
                path: |
                    ./benchmarks/bin
                    ./benchmarks/tasks
                key: ubuntu-20.04-${{ env.BENCHMARKS_CACHE }}

            - name: Quit on cache miss
              if: ${{ steps.cache_bench.outputs.cache-hit != 'true' }}
              run: echo "::error::can not get prebuilt benchmark binary" && exit 1

            - name: Execute benchmarks
              run: ./bin/warduino_benchmark
              working-directory: benchmarks

    test-compile-on-mcus:
        name: Compile on ${{matrix.board.platform-name }}
        needs: formatting-check
        runs-on: ubuntu-latest
        env:
            SKETCHES_REPORTS_PATH: sketches-reports
            SKETCHES_REPORTS_ARTIFACT_NAME: sketches-reports
            LIBRARIES: |
                - source-path: ./
                - name: WiFi
                - name: HTTPClient
                - name: PubSubClient
        strategy:
            fail-fast: false
            matrix:
                board:
                    - fqbn: 'esp32:esp32:esp32'
                      platform-name: esp32:esp32
                include:
                    - board:
                        platform-name: esp32:esp32
                      platforms: |
                        # Install ESP32 platform via Boards Manager
                        - name: esp32:esp32
                          source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
                      sketches: |
                        - tests/compilation/esp32
        steps:
            - uses: actions/checkout@v2
            - name: Compile sketches
              uses: arduino/compile-sketches@v1
              with:
                  platforms: ${{ matrix.platforms }}
                  fqbn: ${{ matrix.board.fqbn }}
                  sketch-paths: |
                      ${{ matrix.sketches }}
                  libraries: |
                      ${{ env.LIBRARIES }}
                  enable-deltas-report: true
                  sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}
            - name: Upload sketches report to workflow artifact
              uses: actions/upload-artifact@v2
              with:
                name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
                path: ${{ env.SKETCHES_REPORTS_PATH }}

    report:
        name: Report memory usage of the Arduino sketches
        needs: test-compile-on-mcus
        if: ${{ github.event_name == 'pull_request' }}
        runs-on: ubuntu-latest
        steps:
            - name: Download sketches reports artifact
              uses: actions/download-artifact@v2
              with:
                name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
                path: ${{ env.SKETCHES_REPORTS_PATH }}
            - uses: arduino/report-size-deltas@v1
              with:
                sketches-reports-source: /github/workspace/sketches-reports # ${{ env.SKETCHES_REPORTS_PATH }}
