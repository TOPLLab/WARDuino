{"version":3,"sources":["~lib/rt/common.ts","src/main.ts"],"names":[],"mappings":"6PCqBY,EAAK,EAAb,EACA,EAGA,EACiB,EAAK,EAAlB,EACM,GAAN,EACa,EAAK,EAAlB,EACM,GAAN,EACgB,EAAE,EAAE,GAAI,GAAxB,EACI,EAAE,EAAF,CAAJ,E","sourceRoot":"./blink","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n// @ts-ignore: decorator\n@inline export const TRACE = false;\n// @ts-ignore: decorator\n@inline export const RTRACE = isDefined(ASC_RTRACE);\n// @ts-ignore: decorator\n@inline export const PROFILE = isDefined(ASC_PROFILE);\n\n// Memory manager\n\n// ╒════════════ Memory manager block layout (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize;\n}\n\n/** Overhead of a memory manager block. */\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD: usize = offsetof<BLOCK>();\n\n/** Maximum size of a memory manager block's payload. */\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n\n// Garbage collector\n\n// ╒══════════ Garbage collector object layout (32-bit) ═══════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                     Memory manager block                      │ -20\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                            GC info                            │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                            GC info                            │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT id                              │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT size                            │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class OBJECT extends BLOCK {\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Garbage collector info. */\n  gcInfo2: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n/** Overhead of a garbage collector object. Excludes memory manager block overhead. */\n// @ts-ignore: decorator\n@inline export const OBJECT_OVERHEAD: usize = (offsetof<OBJECT>() - BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK;\n\n/** Maximum size of a garbage collector object's payload. */\n// @ts-ignore: decorator\n@inline export const OBJECT_MAXSIZE: usize = BLOCK_MAXSIZE - OBJECT_OVERHEAD;\n\n/** Total of memory manager and garbage collector overhead. */\n// @ts-ignore: decorator\n@inline export const TOTAL_OVERHEAD: usize = BLOCK_OVERHEAD + OBJECT_OVERHEAD;\n","// Blinking LED example\n@external(\"env\", \"chip_pin_mode\")       export declare function pinMode(pin: u32, mode: u32): void;\n@external(\"env\", \"chip_digital_write\")  export declare function digitalWrite(pin: u32, value: u32): void;\n@external(\"env\", \"chip_delay\")          export declare function delay(ms: u32): void;\n@external(\"env\", \"display_init\")        export declare function initDisplay(): void;\n@external(\"env\", \"display_draw_rect\")   export declare function displayDrawRect(x:i32,y:i32,w:i32,h:i32): void;\n\nenum PinVoltage {\n    /** Low voltage on a digital I/O pin */\n    LOW  = 0,\n    /** High voltage on a digital I/O pin */\n    HIGH = 1,\n}\n\n\nexport function main(): void {\n    const led: u32 = 4;\n    const pause: u32 = 1000;\n\t\t\t\tconst OUTPUT: u32 = 3;\n\t\t\t\tlet x:i32 = 0;\n\n    pinMode(led, OUTPUT);\n\t\t\t\tinitDisplay();\n\n\n    while (true) {\n        digitalWrite(led, PinVoltage.HIGH);\n        delay(pause);\n        digitalWrite(led, PinVoltage.LOW);\n\t\t\t\t\t\t\t\tdelay(pause);\n\t\t\t\t\t\t\t\tdisplayDrawRect(x,0,150,150);\n\t\t\t\t\t\t\t\tx = x+10;\n\t\t\t\t}\n}\n"]}