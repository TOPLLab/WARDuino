
> warduino-testsuite@1.0.0 spectest
> latch ./src/spec.test.ts

::group::converting /home/tom/Arduino/libraries/WARDuino/tests/latch/scp/float_exprs/
> Scanning suite: /home/tom/Arduino/libraries/WARDuino/tests/latch/scp/float_exprs/

> Building scenarios [0/7] [1/7] [2/7] [3/7] [4/7] [5/7] [6/7] [7/7]

> Starting framework (this may take a while)

::endgroup::

[95m    General Information[0m
[95m    ===================[0m
[95m    Platforms  [0m
[95m    VM commit  4ce14c2[0m


::group::[95mesp wrover: Specification test suite for WebAssembly%s[0m

::group::[95mesp wrover: Test: float_exprs_45.wast%s[0m
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_select_to_abs" (f32.const nan:0x200000)) (f32.const nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_select_to_abs" (f32.const -nan)) (f32.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_select_to_abs" (f32.const 0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_select_to_abs" (f32.const -0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_select_to_abs" (f32.const nan:0x200000)) (f32.const nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_select_to_abs" (f32.const -nan)) (f32.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_select_to_abs" (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_select_to_abs" (f32.const -0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_select_to_abs" (f32.const nan:0x200000)) (f32.const -nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_select_to_abs" (f32.const -nan)) (f32.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_select_to_abs" (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_select_to_abs" (f32.const -0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_select_to_abs" (f32.const nan:0x200000)) (f32.const -nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_select_to_abs" (f32.const -nan)) (f32.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_select_to_abs" (f32.const 0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_select_to_abs" (f32.const -0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_select_to_abs" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_select_to_abs" (f64.const -nan)) (f64.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_select_to_abs" (f64.const 0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_select_to_abs" (f64.const -0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_select_to_abs" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_select_to_abs" (f64.const -nan)) (f64.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_select_to_abs" (f64.const 0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_select_to_abs" (f64.const -0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_select_to_abs" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_select_to_abs" (f64.const -nan)) (f64.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_select_to_abs" (f64.const 0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_select_to_abs" (f64.const -0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_select_to_abs" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_select_to_abs" (f64.const -nan)) (f64.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_select_to_abs" (f64.const 0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_select_to_abs" (f64.const -0.0)) (f64.const -0.0))
::endgroup::

::group::[95mesp wrover: Test: float_exprs_46.wast%s[0m
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_if_to_abs" (f32.const nan:0x200000)) (f32.const nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_if_to_abs" (f32.const -nan)) (f32.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_if_to_abs" (f32.const 0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_lt_if_to_abs" (f32.const -0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_if_to_abs" (f32.const nan:0x200000)) (f32.const nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_if_to_abs" (f32.const -nan)) (f32.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_if_to_abs" (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_le_if_to_abs" (f32.const -0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_if_to_abs" (f32.const nan:0x200000)) (f32.const -nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_if_to_abs" (f32.const -nan)) (f32.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_if_to_abs" (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_gt_if_to_abs" (f32.const -0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_if_to_abs" (f32.const nan:0x200000)) (f32.const -nan:0x200000))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_if_to_abs" (f32.const -nan)) (f32.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_if_to_abs" (f32.const 0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_ge_if_to_abs" (f32.const -0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_if_to_abs" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_if_to_abs" (f64.const -nan)) (f64.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_if_to_abs" (f64.const 0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_lt_if_to_abs" (f64.const -0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_if_to_abs" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_if_to_abs" (f64.const -nan)) (f64.const -nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_if_to_abs" (f64.const 0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_le_if_to_abs" (f64.const -0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_if_to_abs" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_if_to_abs" (f64.const -nan)) (f64.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_if_to_abs" (f64.const 0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_gt_if_to_abs" (f64.const -0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_if_to_abs" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_if_to_abs" (f64.const -nan)) (f64.const nan))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_if_to_abs" (f64.const 0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_ge_if_to_abs" (f64.const -0.0)) (f64.const -0.0))
::endgroup::

::group::[95mesp wrover: Test: float_exprs_63.wast%s[0m
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_sub" (f32.const -0.0) (f32.const -0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_sub" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_sub" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_sub" (f32.const 0.0) (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_sub" (f64.const -0.0) (f64.const -0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_sub" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_sub" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_sub" (f64.const 0.0) (f64.const 0.0)) (f64.const -0.0))
::endgroup::

::group::[95mesp wrover: Test: float_exprs_64.wast%s[0m
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_add" (f32.const -0.0) (f32.const -0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_add" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_add" (f32.const -0.0) (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_neg_add" (f32.const 0.0) (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_add" (f64.const -0.0) (f64.const -0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_add" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_add" (f64.const -0.0) (f64.const 0.0)) (f64.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_neg_add" (f64.const 0.0) (f64.const 0.0)) (f64.const -0.0))
::endgroup::

::group::[95mesp wrover: Test: float_exprs_65.wast%s[0m
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_add_neg_neg" (f32.const -0.0) (f32.const -0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_add_neg_neg" (f32.const 0.0) (f32.const -0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_add_neg_neg" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.no_fold_add_neg_neg" (f32.const 0.0) (f32.const 0.0)) (f32.const -0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_add_neg_neg" (f64.const -0.0) (f64.const -0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_add_neg_neg" (f64.const 0.0) (f64.const -0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_add_neg_neg" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.no_fold_add_neg_neg" (f64.const 0.0) (f64.const 0.0)) (f64.const -0.0))
::endgroup::

::group::[95mesp wrover: Test: float_exprs_89.wast%s[0m
      [32m[32mâœ”[39m[0m ((invoke "f32.contract2fma" (f32.const 1.0) (f32.const 1.0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.contract2fma" (f32.const 0x1.19999ap+0) (f32.const 0x1.19999ap+0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f32.contract2fma" (f32.const 0x1.333332p+0) (f32.const 0x1.333332p+0)) (f32.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.contract2fma" (f64.const 1.0) (f64.const 1.0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.contract2fma" (f64.const 0x1.199999999999ap+0) (f64.const 0x1.199999999999ap+0)) (f64.const 0.0))
      [32m[32mâœ”[39m[0m ((invoke "f64.contract2fma" (f64.const 0x1.3333333333333p+0) (f64.const 0x1.3333333333333p+0)) (f64.const 0.0))
::endgroup::

::group::[95mesp wrover: Test: float_exprs_93.wast%s[0m
      [32m[32mâœ”[39m[0m ((invoke "point_four" (f64.const 4.0) (f64.const 10.0)) (i32.const 0))
::endgroup::
::endgroup::
::endgroup::

[95m    Test Suite Results[0m
[95m    ==================
[0m
[95m    Scenarios:[0m
[92m      [0m[32m8 passing[0m[90m (29s)[0m
[36m      [0m[36m0 skipped[0m

[95m    Actions:[0m
[92m      [0m[32m95 passing[0m

