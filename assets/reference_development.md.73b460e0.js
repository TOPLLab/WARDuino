import{i as e}from"./chunks/illustration.f11271bf.js";import{o as s,c as t,J as a,V as n}from"./chunks/framework.34305d4c.js";const o=n(`<h1 id="developing-warduino" tabindex="-1">Developing WARDuino <a class="header-anchor" href="#developing-warduino" aria-label="Permalink to &quot;Developing WARDuino&quot;">​</a></h1><p>This guide is for people who want to help with development. We highly recommend you first read more on the <a href="./architecture.html">architecture</a> of the virtual machine in the technical reference.</p><h2 id="a-tale-of-three-versions" tabindex="-1">A Tale of three Versions <a class="header-anchor" href="#a-tale-of-three-versions" aria-label="Permalink to &quot;A Tale of three Versions&quot;">​</a></h2><p>For microcontrollers, WARDuino supports two different toolchains, Arduino and ESP-IDF. Additionally, there is a third version to run on desktops with its own command-line interface.</p><p>Each version of the virtual machine has a slightly different way of receiving debugging messages, has a different entry point, and has their own primitive implementations. Each version has its own folder under <a href="https://github.com/TOPLLab/WARDuino/tree/main/platforms" target="_blank" rel="noreferrer">platforms</a> in the git repository. The implementations of the primitives for each platform are found in the <a href="https://github.com/TOPLLab/WARDuino/tree/main/src/Primitives" target="_blank" rel="noreferrer">src/Primitives</a> folder.</p><h2 id="debugging-the-virtual-machine" tabindex="-1">Debugging the Virtual Machine <a class="header-anchor" href="#debugging-the-virtual-machine" aria-label="Permalink to &quot;Debugging the Virtual Machine&quot;">​</a></h2><p>While the WARDuino debugger allows developers to debug their programs on the microcontroller, the VM itself also needs to be debugged from time to time. That includes the debugger of the VM as well. Luckily the debugger can be debugged with the help of a JTAG interface.</p><p>This tutorial goes over the steps you can take to debug the WARDuino virtual machine with the ESP32 WROVER KIT v4.1, but other boards and JTAGs can also be used.</p><div class="info custom-block"><p class="custom-block-title">Debugging the Arduino version</p><p>This tutorial uses OpenOCD to debug the ESP-IDF version of WARDuino. The Arduino version can be debugged using the new <a href="https://docs.arduino.cc/software/ide-v2/tutorials/ide-v2-debugger" target="_blank" rel="noreferrer">Arduino IDE 2</a>.</p></div><h3 id="esp32-wrover-kit-v4-1-tutorial" tabindex="-1">ESP32 WROVER KIT V4.1 Tutorial <a class="header-anchor" href="#esp32-wrover-kit-v4-1-tutorial" aria-label="Permalink to &quot;ESP32 WROVER KIT V4.1 Tutorial&quot;">​</a></h3><p>The ESP32 WROVER KIT v4.1 has been extensively used to debug and develop the WARDuino virtual machine. It comes standard with a JTAG to USB interface, which makes debugging fairly easy to setup—as JTAGs go.</p><h4 id="first-time-setup" tabindex="-1">First Time Setup <a class="header-anchor" href="#first-time-setup" aria-label="Permalink to &quot;First Time Setup&quot;">​</a></h4><p><strong>Step 1.</strong> Before you start, you need to enable the JTAG interface by <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/hw-reference/esp32/get-started-wrover-kit.html#setup-options" target="_blank" rel="noreferrer">installing the right jumper blocks</a> on the board.</p><p><strong>Step 2.</strong> You need to install <a href="https://openocd.org/pages/getting-openocd.html" target="_blank" rel="noreferrer">OpenOCD</a>.</p><p><strong>Step 3.</strong> You need to install the <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/#installation" target="_blank" rel="noreferrer">ESP-IDF toolchain</a>.</p><p><strong>Step 4.</strong> In order to connect to the ESP32 device with OpenOCD you need to run<a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/jtag-debugging/index.html#run-openocd" target="_blank" rel="noreferrer"><sup>[1]</sup></a>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">openocd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">board/esp32-wrover-kit-3.3v.cfg</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">Permission problems</p><p>If you encounter an error, <code>LIBUSB_ERROR_ACCESS</code>, then this is mostly likely due to OpenOCD lacking the right permissions to access the serial port.</p></div><h4 id="development-environment-setup" tabindex="-1">Development Environment Setup <a class="header-anchor" href="#development-environment-setup" aria-label="Permalink to &quot;Development Environment Setup&quot;">​</a></h4><p>These steps are meant for debugging the WARDuino virtual machine, but can be used to debug other projects as well. If you first want to try out the debugger on an example project, we recommend the IDF LCD example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> $IDF_PATH</span><span style="color:#C3E88D;">/examples/peripherals/spi_master/lcd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lcd</span></span></code></pre></div><p><strong>Step 1.</strong> In the project root folder, add the &quot;wrover kit&quot; component:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">idf.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add-dependency</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">espressif/esp_wrover_kit^1.5.0</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>If you use a different board and JTAG this step will be different.</p><p><strong>Step 2.</strong> To use the <code>gdb</code> command-line interface, add a <code>gdbinit</code> file to the project root folder<a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/jtag-debugging/using-debugger.html#command-line" target="_blank" rel="noreferrer"><sup>[2]</sup></a> with:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">target remote :3333</span></span>
<span class="line"><span style="color:#A6ACCD;">set remote hardware-watchpoint-limit 2</span></span>
<span class="line"><span style="color:#A6ACCD;">mon reset halt</span></span>
<span class="line"><span style="color:#A6ACCD;">maintenance flush register-cache</span></span>
<span class="line"><span style="color:#A6ACCD;">thb app_main</span></span>
<span class="line"><span style="color:#A6ACCD;">c</span></span></code></pre></div><p><strong>Step 3.</strong> Now you need to build and flash:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">idf.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#FFCB6B;">idf.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flash</span></span></code></pre></div><p>That concludes the setup. Now you are finally ready to start debugging.</p><p><strong>Debugging with gdb.</strong> You can <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/jtag-debugging/using-debugger.html#jtag-debugging-with-idf-py" target="_blank" rel="noreferrer">use idf.py</a> to start both OpenOCD and <code>gdb</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">idf.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">openocd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#FFCB6B;">idf.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gdb</span></span></code></pre></div><p><strong>Debugging with VS Code.</strong> Espressif has also developed a <a href="https://github.com/espressif/vscode-esp-idf-extension/blob/master/docs/DEBUGGING.md" target="_blank" rel="noreferrer">VS Code plugin</a> to use OpenOCD debugging.</p>`,32),h=JSON.parse('{"title":"Developing WARDuino","description":"","frontmatter":{},"headers":[],"relativePath":"reference/development.md","filePath":"reference/development.md","lastUpdated":null}'),r={name:"reference/development.md"},u=Object.assign(r,{setup(l){return(i,p)=>(s(),t("div",null,[o,a(e,{src:"/images/openocd.png",zoomable:"false",caption:"An active debug session of a WARDuino instance in the OpenOCD plugin for VS Code."})]))}});export{h as __pageData,u as default};
